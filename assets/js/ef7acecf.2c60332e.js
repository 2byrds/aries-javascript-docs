"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[925],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(t),m=o,g=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return t?a.createElement(g,r(r({ref:n},d),{},{components:t})):a.createElement(g,r({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var l=2;l<i;l++)r[l]=t[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2360:function(e,n,t){t.d(n,{Z:function(){return r}});var a=t(7294),o=t(6010),i="tabItem_OmH5";function r(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(i,r),hidden:t},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return m}});var a=t(7462),o=t(7294),i=t(2389),r=t(7392),s=t(7094),c=t(2466),l=t(6010),d="tabList_uSqn",u="tabItem_LplD";function p(e){var n,t,i,p=e.lazy,m=e.block,g=e.defaultValue,h=e.values,b=e.groupId,f=e.className,v=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=h?h:v.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),N=(0,r.l)(k,(function(e,n){return e.value===n.value}));if(N.length>0)throw new Error('Docusaurus error: Duplicate values "'+N.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var w=null===g?g:null!=(n=null!=g?g:null==(t=v.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(i=v[0])?void 0:i.props.value;if(null!==w&&!k.some((function(e){return e.value===w})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,s.U)(),O=y.tabGroupChoices,T=y.setTabGroupChoices,C=(0,o.useState)(w),I=C[0],R=C[1],E=[],A=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=b){var D=O[b];null!=D&&D!==I&&k.some((function(e){return e.value===D}))&&R(D)}var x=function(e){var n=e.currentTarget,t=E.indexOf(n),a=k[t].value;a!==I&&(A(n),R(a),null!=b&&T(b,a))},S=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=E.indexOf(e.currentTarget)+1;t=E[a]||E[0];break;case"ArrowLeft":var o=E.indexOf(e.currentTarget)-1;t=E[o]||E[E.length-1]}null==(n=t)||n.focus()};return o.createElement("div",{className:(0,l.Z)("tabs-container",d)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":m},f)},k.map((function(e){var n=e.value,t=e.label,i=e.attributes;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:I===n?0:-1,"aria-selected":I===n,key:n,ref:function(e){return E.push(e)},onKeyDown:S,onFocus:x,onClick:x},i,{className:(0,l.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":I===n})}),null!=t?t:n)}))),p?(0,o.cloneElement)(v.filter((function(e){return e.props.value===I}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},v.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==I})}))))}function m(e){var n=(0,i.Z)();return o.createElement(p,(0,a.Z)({key:String(n)},e))}},2960:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return m}});var a=t(7462),o=t(3366),i=(t(7294),t(3905)),r=t(9877),s=t(2360),c=["components"],l={},d="Create a connection",u={unversionedId:"tutorials/create-a-connection",id:"tutorials/create-a-connection",title:"Create a connection",description:"This section assumes the following items:",source:"@site/guides/tutorials/create-a-connection.md",sourceDirName:"tutorials",slug:"/tutorials/create-a-connection",permalink:"/aries-javascript-docs/guides/tutorials/create-a-connection",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Agent Config",permalink:"/aries-javascript-docs/guides/tutorials/agent-config"},next:{title:"The Aries JavaScript Ecosystem",permalink:"/aries-javascript-docs/guides/ecosystem/"}},p={},m=[{value:"1. Setting up the agents",id:"1-setting-up-the-agents",level:3},{value:"Bob",id:"bob",level:4},{value:"Acme",id:"acme",level:4},{value:"2. Creating an invitation",id:"2-creating-an-invitation",level:4},{value:"3. Receiving the invitation",id:"3-receiving-the-invitation",level:3},{value:"4. (additional) listen to incoming connection responses",id:"4-additional-listen-to-incoming-connection-responses",level:3},{value:"5. Full code snippets",id:"5-full-code-snippets",level:3},{value:"Useful resources",id:"useful-resources",level:3}],g={toc:m};function h(e){var n=e.components,t=(0,o.Z)(e,c);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"create-a-connection"},"Create a connection"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This section assumes the following items:"),(0,i.kt)("ol",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"A ",(0,i.kt)("a",{parentName:"p",href:"../getting-started/prerequisites"},"valid environment")," for development")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"basic knowledge of the required fields in the ",(0,i.kt)("a",{parentName:"p",href:"./agent-config"},"agent\nconfig"))))),(0,i.kt)("p",null,"In this tutorial we will create a connection as ",(0,i.kt)("em",{parentName:"p"},"Acme Corp")," with ",(0,i.kt)("em",{parentName:"p"},"Bob"),". We will\nstart with setting up both their agents with the minimal configuration required\nto follow this tutorial. After the initialization we will then create an\ninvitation as ",(0,i.kt)("em",{parentName:"p"},"Acme Corp")," and send it over to ",(0,i.kt)("em",{parentName:"p"},"Bob"),". ",(0,i.kt)("em",{parentName:"p"},"Bob")," will then accept\nthis invitation and at that point they have established a connection and they\nknow how to reach each other for sending a basic message, issuing a credential,\nverifying a proof, etc."),(0,i.kt)("h3",{id:"1-setting-up-the-agents"},"1. Setting up the agents"),(0,i.kt)("p",null,"First for both agents we must setup and initialize an agent to work with.\nDepending on your target, ",(0,i.kt)("a",{parentName:"p",href:"../getting-started/prerequisites/react-native"},"React\nNative")," or\n",(0,i.kt)("a",{parentName:"p",href:"../getting-started/prerequisites/react-native"},"Node.js"),", it might vary."),(0,i.kt)("p",null,"In this tutorial ",(0,i.kt)("em",{parentName:"p"},"Bob")," will be in a ",(0,i.kt)("a",{parentName:"p",href:"../getting-started/prerequisites/react-native"},"React Native\nenvironment")," and ",(0,i.kt)("em",{parentName:"p"},"Acme Corp")," in\na ",(0,i.kt)("a",{parentName:"p",href:"../getting-started/prerequisites/nodejs"},"Node.js environment"),"."),(0,i.kt)("h4",{id:"bob"},"Bob"),(0,i.kt)("p",null,"For bob we need to setup a basic agent with a wallet, mediator and outbound\ntransport."),(0,i.kt)("div",{className:"admonition admonition-bob alert alert--alert alert--bob"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83e\uddd4"),"bob")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'import { Agent, InitConfig, HttpOutboundTransport, WsOutboundTransport } from "@aries-framework/core"\nimport { agentDependencies } from "@aries-framework/react-native"\n\nconst config: InitConfig = {\n  label: "demo-agent-bob",\n  walletConfig: {\n    id: "main",\n    key: "demoagentbob00000000000000000000",\n  },\n  mediatorConnectionsInvite: "https://didcomm.agent.community.animo.id?c_i=ey...(many bytes omitted)...Q==",\n  autoAcceptConnections: true,\n}\n\nconst agent = new Agent(config, agentDependencies)\n\nagent.registerOutboundTransport(new WsOutboundTransport())\nagent.registerOutboundTransport(new HttpOutboundTransport())\n\nawait agent.initialize()\n')))),(0,i.kt)("h4",{id:"acme"},"Acme"),(0,i.kt)("p",null,"For bob we need to setup a basic agent with a wallet, inbound and outbound\ntransport."),(0,i.kt)("div",{className:"admonition admonition-acme alert alert--alert alert--acme"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83c\udfe2"),"acme")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'import { Agent, InitConfig, WsOutboundTransport, HttpInboundTransport } from "@aries-framework/core"\nimport { agentDependencies } from "@aries-framework/node"\n\nconst config: InitConfig = {\n  label: "demo-agent-acme",\n  walletConfig: {\n    id: "main",\n    key: "demoagentacme0000000000000000000",\n  },\n  autoAcceptConnections: true,\n}\n\nconst agent = new Agent(config, agentDependencies)\n\nagent.registerOutboundTransport(new WsOutboundTransport())\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerInboundTransport(new HttpInboundTransport({ port: 3000 }))\n\nawait agent.initialize()\n')))),(0,i.kt)("h4",{id:"2-creating-an-invitation"},"2. Creating an invitation"),(0,i.kt)("p",null,"Now that we have setup both agents, we can create an invitation from ",(0,i.kt)("em",{parentName:"p"},"Acme Corp"),"."),(0,i.kt)(r.Z,{mdxType:"Tabs"},(0,i.kt)(s.Z,{label:"New",value:"tab1",mdxType:"TabItem"},(0,i.kt)("p",null,"This method will create an invitation using the legacy method according to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hyperledger/aries-rfcs/blob/main/features/0434-outofband/README.md"},"0434: Out-of-Band Protocol 1.1"),"."),(0,i.kt)("div",{className:"admonition admonition-acme alert alert--alert alert--acme"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83c\udfe2"),"acme")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'const outOfBandRecord = await agent.oob.createInvitation()\n\nconst serializedInvitation = outOfBandRecord.outOfBandInvitation.toUrl({ domain: "https://example.org" })\n'))))),(0,i.kt)(s.Z,{label:"Legacy",value:"tab2",mdxType:"TabItem"},(0,i.kt)("p",null,"This method will create an invitation using the legacy method according to ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hyperledger/aries-rfcs/blob/main/features/0160-connection-protocol/README.md"},"0160: Connection Protocol"),"."),(0,i.kt)("div",{className:"admonition admonition-acme alert alert--alert alert--acme"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83c\udfe2"),"acme")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'const { invitation } = await agent.oob.createLegacyInvitation()\n\nconst serializedInvitation = invitation.toUrl({ domain: "https://example.org" })\n')))))),(0,i.kt)("h3",{id:"3-receiving-the-invitation"},"3. Receiving the invitation"),(0,i.kt)("p",null,"After we have created the invitation we have to transmit it to the other\nagent. Common practise, when sending it to a holder, it to embed the url inside\na QR code. This QR code can then be scanned by the holder, in this case ",(0,i.kt)("em",{parentName:"p"},"Bob"),".\nAfter this, because both have set ",(0,i.kt)("inlineCode",{parentName:"p"},"autoAcceptConnections")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the\nconnection is established."),(0,i.kt)("div",{className:"admonition admonition-bob alert alert--alert alert--bob"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83e\uddd4"),"bob")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},"const { outOfBandRecord } = await agent.oob.receiveInvitationFromUrl(url)\n")))),(0,i.kt)("h3",{id:"4-additional-listen-to-incoming-connection-responses"},"4. (additional) listen to incoming connection responses"),(0,i.kt)("p",null,"When you quickly want to use the event or the data of a response to a\nconnection request, you can start an ",(0,i.kt)("a",{parentName:"p",href:"https://example.org"},"TODO: agent event\nlistener"),"."),(0,i.kt)("p",null,"Another use case for this would be to get the ",(0,i.kt)("inlineCode",{parentName:"p"},"connectionRecord")," of the\nconnection as it is only created when the invitation has been received by the\nother agent. The ",(0,i.kt)("inlineCode",{parentName:"p"},"connectionRecord")," is very essential in processes like ",(0,i.kt)("a",{parentName:"p",href:"https://example.org"},"TODO:\nissuing a credential")," or ",(0,i.kt)("a",{parentName:"p",href:"https://example.org"},"TODO: verifying a\nproof"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"connectionRecord")," can also be retrieved with\n",(0,i.kt)("inlineCode",{parentName:"p"},"agent.connections.findAllByOutOfBandId(id)"),", but with this method there is no\nway of knowing if the invitation has been received."),(0,i.kt)("div",{className:"admonition admonition-acme alert alert--alert alert--acme"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83c\udfe2"),"acme")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'import { ConnectionEventTypes, ConnectionStateChangedEvent, DidExchangeState } from "@aries-framework/node"\n\nagent.events.on<ConnectionStateChangedEvent>(ConnectionEventTypes.ConnectionStateChanged, ({ payload, type }) => {\n  if (payload.connectionRecord.outOfBandId !== outOfBandRecord.id) return\n  if (payload.connectionRecord.state === DidExchangeState.Completed) {\n    // the connection is now ready for usage in other protocols!\n    console.log(`Connection for out of band id ${outOfBandRecord.id} completed`)\n\n    // Custom business logic can be included here\n    // In this example we can send a basic message to the connection, but\n    // anything is possible\n    agent.basicMessages.sendMessage(payload.connectionRecord.id, "Hi, we are now contacts!")\n  }\n})\n')))),(0,i.kt)("h3",{id:"5-full-code-snippets"},"5. Full code snippets"),(0,i.kt)("p",null,"Below are both code snippets for each agent. These can be used as base but\nshould be editted to fit your use case. The\n",(0,i.kt)("a",{parentName:"p",href:"./agent-config#walletconfigkey"},(0,i.kt)("inlineCode",{parentName:"a"},"walletConfig.key")),' must be changed as it can\nlead to other people knowing your "password" to your wallet.'),(0,i.kt)("div",{className:"admonition admonition-acme alert alert--alert alert--acme"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83c\udfe2"),"acme")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'import {\n  Agent,\n  InitConfig,\n  ConnectionEventTypes,\n  ConnectionStateChangedEvent,\n  WsOutboundTransport,\n  HttpInboundTransport,\n  HttpOutboundTransport,\n} from "@aries-framework/core"\nimport { agentDependencies } from "@aries-framework/node"\n\nconst run = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label.\n  const config: InitConfig = {\n    label: "demo-agent-acme",\n    walletConfig: {\n      id: "main",\n      key: "demoagentacme0000000000000000000",\n    },\n    autoAcceptConnections: true,\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent(config, agentDependencies)\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `Http` inbound transport\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3000 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  // Create an `out-of-band` invitation that we can send to another agent\n  const outOfBandRecord = await agent.oob.createInvitation()\n\n  // Start an optional event listener to see if a connection event has happened\n  // with the specific `outOfBandId`.\n  agent.events.on<ConnectionStateChangedEvent>(ConnectionEventTypes.ConnectionStateChanged, ({ payload, type }) => {\n    if (payload.connectionRecord.outOfBandId !== outOfBandRecord.id) return\n    if (payload.connectionRecord.state === DidExchangeState.Completed) {\n      // the connection is now ready for usage in other protocols!\n      console.log(`Connection for out of band id ${outOfBandRecord.id} completed`)\n\n      // Custom business logic can be included here\n      // In this example we can send a basic message to the connection, but\n      // anything is possible\n      agent.basicMessages.sendMessage(payload.connectionRecord.id, "Hi, we are now contacts!")\n    }\n  })\n\n  // Serialize the invitation to a url so that we can easily transfer it over\n  // HTTP or embed it in a QR code and scan it as another agent\n  const serializedInvitation = outOfBandRecord.outOfBandInvitation.toUrl({ domain: "https://example.org" })\n\n  // The last step will be a mocked function that creates a QR code from a\n  // string, this is not handled by the Aries JavaScript Ecosystem, but a\n  // third-party library should be used\n  const QR = mockEmbedInQR(serializedInvitation)\n}\n\nvoid run()\n')))),(0,i.kt)("div",{className:"admonition admonition-bob alert alert--alert alert--bob"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83e\uddd4"),"bob")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'import { Agent, InitConfig, WsOutboundTransport, HttpOutboundTransport } from "@aries-framework/core"\nimport { agentDependencies } from "@aries-framework/react-native"\n\nconst run = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration and the label. It also sets the mediator invitation url,\n  // because this is most likely required in a mobile environment.\n  const config: InitConfig = {\n    label: "demo-agent-bob",\n    walletConfig: {\n      id: "main",\n      key: "demoagentbob00000000000000000000",\n    },\n    mediatorConnectionsInvite: "https://didcomm.agent.community.animo.id?c_i=ey...(many bytes omitted)...Q==",\n    autoAcceptConnections: true,\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent(config, agentDependencies)\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `Http` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Initialize the agent\n  await agent.initialize()\n\n  // Here we mock the scanning of the QR code created by Acme Corp\n  const url = mockScanQR()\n\n  // With the url extracted from the QR code, the agent can accept it and this\n  // will return an oobRecord and an optional connectionRecord\n  const { oobRecord, connectionRecord } = await agent.receiveInvitationFromUrl(url)\n}\n\nvoid run()\n')))),(0,i.kt)("h3",{id:"useful-resources"},"Useful resources"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/hyperledger/aries-rfcs/blob/main/features/0160-connection-protocol/README.md"},"0160: Connection Protocol")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/hyperledger/aries-rfcs/blob/main/features/0434-outofband/README.md"},"0434: Out-of-Band Protocol 1.1"))))}h.isMDXComponent=!0}}]);