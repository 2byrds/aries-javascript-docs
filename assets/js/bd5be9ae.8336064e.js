"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[993],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(t),m=r,g=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return t?a.createElement(g,o(o({ref:n},c),{},{components:t})):a.createElement(g,o({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2360:function(e,n,t){t.d(n,{Z:function(){return o}});var a=t(7294),r=t(6010),i="tabItem_OmH5";function o(e){var n=e.children,t=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:t},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return m}});var a=t(7462),r=t(7294),i=t(2389),o=t(7392),s=t(7094),l=t(2466),d=t(6010),c="tabList_uSqn",u="tabItem_LplD";function p(e){var n,t,i,p=e.lazy,m=e.block,g=e.defaultValue,h=e.values,f=e.groupId,v=e.className,b=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),N=null!=h?h:b.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),k=(0,o.l)(N,(function(e,n){return e.value===n.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var w=null===g?g:null!=(n=null!=g?g:null==(t=b.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(i=b[0])?void 0:i.props.value;if(null!==w&&!N.some((function(e){return e.value===w})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+N.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=(0,s.U)(),T=y.tabGroupChoices,C=y.setTabGroupChoices,I=(0,r.useState)(w),A=I[0],O=I[1],D=[],P=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var x=T[f];null!=x&&x!==A&&N.some((function(e){return e.value===x}))&&O(x)}var E=function(e){var n=e.currentTarget,t=D.indexOf(n),a=N[t].value;a!==A&&(P(n),O(a),null!=f&&C(f,a))},R=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=D.indexOf(e.currentTarget)+1;t=D[a]||D[0];break;case"ArrowLeft":var r=D.indexOf(e.currentTarget)-1;t=D[r]||D[D.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,d.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,d.Z)("tabs",{"tabs--block":m},v)},N.map((function(e){var n=e.value,t=e.label,i=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:A===n?0:-1,"aria-selected":A===n,key:n,ref:function(e){return D.push(e)},onKeyDown:R,onFocus:E,onClick:E},i,{className:(0,d.Z)("tabs__item",u,null==i?void 0:i.className,{"tabs__item--active":A===n})}),null!=t?t:n)}))),p?(0,r.cloneElement)(b.filter((function(e){return e.props.value===A}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==A})}))))}function m(e){var n=(0,i.Z)();return r.createElement(p,(0,a.Z)({key:String(n)},e))}},2347:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return d},metadata:function(){return u},toc:function(){return m}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),o=t(9877),s=t(2360),l=["components"],d={},c="Issue a credential",u={unversionedId:"tutorials/issue-a-credential",id:"tutorials/issue-a-credential",title:"Issue a credential",description:"Using AnonCreds and the",source:"@site/guides/tutorials/issue-a-credential.md",sourceDirName:"tutorials",slug:"/tutorials/issue-a-credential",permalink:"/aries-javascript-docs/guides/tutorials/issue-a-credential",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Create a connection",permalink:"/aries-javascript-docs/guides/tutorials/create-a-connection"},next:{title:"The Aries JavaScript Ecosystem",permalink:"/aries-javascript-docs/guides/ecosystem/"}},p={},m=[{value:"1. Setting up the agents",id:"1-setting-up-the-agents",level:3},{value:"Holder",id:"holder",level:4},{value:"Issuer",id:"issuer",level:4},{value:"2. Registering the schema and credential definition",id:"2-registering-the-schema-and-credential-definition",level:3},{value:"3. Listening for incoming credentials",id:"3-listening-for-incoming-credentials",level:3},{value:"4. Issuing a credential",id:"4-issuing-a-credential",level:3},{value:"5. Full code snippets",id:"5-full-code-snippets",level:3},{value:"Useful resources",id:"useful-resources",level:3}],g={toc:m};function h(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"issue-a-credential"},"Issue a credential"),(0,i.kt)("p",null,"Using ",(0,i.kt)("a",{parentName:"p",href:"https://anoncreds-wg.github.io/anoncreds-spec/"},"AnonCreds")," and the\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hyperledger/aries-rfcs/blob/main/features/0453-issue-credential-v2/README.md"},"Issue Credential V2\nProtocol"),"\nor the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/hyperledger/aries-rfcs/blob/main/features/0036-issue-credential/README.md"},"Issue Credential V1\nProtocol"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This section assumes the following items:"),(0,i.kt)("ol",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"A ",(0,i.kt)("a",{parentName:"p",href:"../getting-started/prerequisites"},"valid environment")," for development")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Basic knowledge of the required fields in the ",(0,i.kt)("a",{parentName:"p",href:"./agent-config"},"agent\nconfig"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"A ",(0,i.kt)("a",{parentName:"p",href:"./create-a-connection"},"connection between the ",(0,i.kt)("em",{parentName:"a"},"Holder")," and ",(0,i.kt)("em",{parentName:"a"},"Issuer")))))),(0,i.kt)("p",null,"In this tutorial we will issue a credential from the ",(0,i.kt)("em",{parentName:"p"},"Issuer")," to a ",(0,i.kt)("em",{parentName:"p"},"Holder"),". We\nwill start with setting up both their agents with the minimal configuration\nrequired to follow this tutorial. After the initialization we will then create\na schema , credential definition and a credential as the ",(0,i.kt)("em",{parentName:"p"},"Issuer")," and send the\ncredential over to the ",(0,i.kt)("em",{parentName:"p"},"Holder"),". The ",(0,i.kt)("em",{parentName:"p"},"holder")," will then accept this credential\nand automatically store it in their wallet."),(0,i.kt)("h3",{id:"1-setting-up-the-agents"},"1. Setting up the agents"),(0,i.kt)("p",null,"First for both agents we must setup and initialize an agent to work with.\nDepending on your target, ",(0,i.kt)("a",{parentName:"p",href:"../getting-started/prerequisites/react-native"},"React\nNative")," or\n",(0,i.kt)("a",{parentName:"p",href:"../getting-started/prerequisites/react-native"},"Node.js"),", it might vary."),(0,i.kt)("p",null,"In this tutorial the ",(0,i.kt)("em",{parentName:"p"},"Holder")," will be in a ",(0,i.kt)("a",{parentName:"p",href:"../getting-started/prerequisites/react-native"},"React Native\nenvironment")," and the ",(0,i.kt)("em",{parentName:"p"},"Issuer")," in\na ",(0,i.kt)("a",{parentName:"p",href:"../getting-started/prerequisites/nodejs"},"Node.js environment"),"."),(0,i.kt)("h4",{id:"holder"},"Holder"),(0,i.kt)("p",null,"For the ",(0,i.kt)("em",{parentName:"p"},"Holder")," we need to setup a basic agent with a wallet, mediator,\noutbound transport and a ledger."),(0,i.kt)("div",{className:"admonition admonition-holder alert alert--alert alert--holder"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\uddc4"),"holder")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'import {\n  Agent,\n  AutoAcceptCredential,\n  InitConfig,\n  HttpOutboundTransport,\n  WsOutboundTransport,\n} from "@aries-framework/core"\nimport { agentDependencies } from "@aries-framework/react-native"\n\nconst getGenesisTransaction = async (url: string) => {\n  const response = await fetch(url)\n\n  return await response.text()\n}\n\nconst genesisTransactionsBCovrinTestNet = await getGenesisTransaction("http://test.bcovrin.vonx.io/genesis")\n\nconst config: InitConfig = {\n  label: "demo-agent-holder",\n  walletConfig: {\n    id: "main",\n    key: "demoagentholder00000000000000000",\n  },\n  indyLedgers: [\n    {\n      id: "bcovin-test-net",\n      isProduction: false,\n      genesisTransactions: genesisTransactionsBCovrinTestNet,\n    },\n  ],\n  mediatorConnectionsInvite: "https://example.com?c_i=ey...(many bytes omitted)...Q==",\n  autoAcceptCredentials: AutoAcceptCredential.ContentApproved,\n}\n\nconst agent = new Agent(config, agentDependencies)\n\nagent.registerOutboundTransport(new WsOutboundTransport())\nagent.registerOutboundTransport(new HttpOutboundTransport())\n\nawait agent.initialize()\n')))),(0,i.kt)("h4",{id:"issuer"},"Issuer"),(0,i.kt)("p",null,"For the ",(0,i.kt)("em",{parentName:"p"},"Issuer")," the setup is almost the same as the ",(0,i.kt)("em",{parentName:"p"},"Holder"),". The difference\nis, is that the ",(0,i.kt)("em",{parentName:"p"},"Issuer")," does not need a mediator but an\n",(0,i.kt)("inlineCode",{parentName:"p"},"HttpInboundTransport"),"."),(0,i.kt)("p",null,"It is also very important for the ",(0,i.kt)("em",{parentName:"p"},"Issuer")," to have a public DID, for the binding\nwith a credential definition, amongst other things. For this demo we will use ",(0,i.kt)("a",{parentName:"p",href:"http://test.bcovrin.vonx.io"},"BCovrin\nTest"),". If you want to follow this tutorial, you\nhave to register a public DID ",(0,i.kt)("a",{parentName:"p",href:"http://test.bcovrin.vonx.io"},"here")," via the\n",(0,i.kt)("inlineCode",{parentName:"p"},"Wallet seed")," field (this must be the same as the seed inside the config under\nthe key ",(0,i.kt)("a",{parentName:"p",href:"./agent-config#publicdidseed"},(0,i.kt)("inlineCode",{parentName:"a"},"publicDidSeed")),")."),(0,i.kt)("div",{className:"admonition admonition-issuer alert alert--alert alert--issuer"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\udcc4"),"issuer")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'import {\n  Agent,\n  AutoAcceptCredential,\n  InitConfig,\n  HttpInboundTransport,\n  HttpOutboundTransport,\n  WsOutboundTransport,\n} from "@aries-framework/core"\nimport { agentDependencies } from "@aries-framework/node"\nimport fetch from "node-fetch"\n\nconst getGenesisTransaction = async (url: string) => {\n  const response = await fetch(url)\n\n  return await response.text()\n}\n\nconst genesisTransactionsBCovrinTestNet = await getGenesisTransaction("http://test.bcovrin.vonx.io/genesis")\n\nconst config: InitConfig = {\n  label: "demo-agent-issuer",\n  walletConfig: {\n    id: "main",\n    key: "demoagentissuer00000000000000000",\n  },\n  publicDidSeed: "demoissuerdidseed00000000000000",\n  indyLedgers: [\n    {\n      id: "bcovrin-test-net",\n      isProduction: false,\n      genesisTransactions: genesisTransactionsBCovrinTestNet,\n    },\n  ],\n  autoAcceptCredentials: AutoAcceptCredential.ContentApproved,\n}\n\nconst agent = new Agent(config, agentDependencies)\n\nagent.registerOutboundTransport(new WsOutboundTransport())\nagent.registerOutboundTransport(new HttpOutboundTransport())\nagent.registerInboundTransport(new HttpInboundTransport({ port: 3000 }))\n\nawait agent.initialize()\n')))),(0,i.kt)("h3",{id:"2-registering-the-schema-and-credential-definition"},"2. Registering the schema and credential definition"),(0,i.kt)("p",null,"When we want to issue a credential we must first create a blueprint, the\nschema, of the credential and bind it to a specific issuer, the credential\ndefinition. This binding makes sure that when you want to verify the\ncredential, you can request that it must be issued from a specific party."),(0,i.kt)("div",{className:"admonition admonition-issuer alert alert--alert alert--issuer"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\udcc4"),"issuer")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'const schema = await agent.ledger.registerSchema({\n  name: "identity",\n  version: "1.0",\n  attributes: ["Name", "Date of birth"],\n})\n\nconst credentialDefinition = await agent.ledger.registerCredentialDefinition({\n  schema,\n  supportRevocation: false,\n  tag: "default",\n})\n')))),(0,i.kt)("h3",{id:"3-listening-for-incoming-credentials"},"3. Listening for incoming credentials"),(0,i.kt)("div",{className:"admonition admonition-holder alert alert--alert alert--holder"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\uddc4"),"holder")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'import { CredentialStateChangedEvent, CredentialEventTypes } from "@aries-framework/core"\n\nagent.events.on<CredentialStateChangedEvent>(CredentialEventTypes.CredentialStateChanged, ({ payload, type }) => {\n  switch (payload.credentialRecord.state) {\n    case CredentialState.OfferReceived:\n      // custom logic here\n      agent.credentials.acceptOffer({ credentialRecordId: payload.credentialRecord.id })\n  }\n})\n')))),(0,i.kt)("h3",{id:"4-issuing-a-credential"},"4. Issuing a credential"),(0,i.kt)("p",null,"Now that everything is setup on both sides, the ",(0,i.kt)("em",{parentName:"p"},"Issuer")," can now offer a\ncredential to the ",(0,i.kt)("em",{parentName:"p"},"Holder"),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"In this example we do not instantiate a connection and assume that there is\none. Please refer to this guide ",(0,i.kt)("a",{parentName:"p",href:"./create-a-connection"},"Create a connection"),"\nto get a connection and connectionId")),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(s.Z,{label:"V1",value:"tab1",mdxType:"TabItem"},(0,i.kt)("div",{className:"admonition admonition-issuer alert alert--alert alert--issuer"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\udcc4"),"issuer")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'import { CredentialProtocolVersion, CredentialPreviewAttribute } form \'@aries-framework/core\'\n\nconst credentialExchangeRecord = agent.credentials.offerCredential({\n  connectionId,\n  protocolVersion: CredentialProtocolVersion.V1,\n  credentialFormats: {\n    indy: {\n      attributes: [\n        new CredentialPreviewAttribute({\n          name: "Name",\n          value: "Jane Holder",\n        }),\n        new CredentialPreviewAttribute({\n          name: "Date of birth",\n          value: "10-08-1990",\n        }),\n      ],\n    },\n  },\n})\n'))))),(0,i.kt)(s.Z,{label:"V2",value:"tab2",mdxType:"TabItem"},(0,i.kt)("div",{className:"admonition admonition-issuer alert alert--alert alert--issuer"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\udcc4"),"issuer")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'import { CredentialProtocolVersion, CredentialPreviewAttribute } form \'@aries-framework/core\'\n\nconst credentialExchangeRecord = agent.credentials.offerCredential({\n  connectionId,\n  protocolVersion: CredentialProtocolVersion.V2,\n  credentialFormats: {\n    indy: {\n      attributes: [\n        new CredentialPreviewAttribute({\n          name: "Name",\n          value: "Jane Holder",\n        }),\n        new CredentialPreviewAttribute({\n          name: "Date of birth",\n          value: "10-08-1990",\n        }),\n      ],\n    },\n  },\n})\n')))))),(0,i.kt)("h3",{id:"5-full-code-snippets"},"5. Full code snippets"),(0,i.kt)("p",null,"Below are both code snippets for each agent. These can be used as base but\nshould be editted to fit your use case. The\n",(0,i.kt)("a",{parentName:"p",href:"./agent-config#walletconfigkey"},(0,i.kt)("inlineCode",{parentName:"a"},"walletConfig.key")),' must be changed as it can\nlead to other people knowing your "password" to your wallet.'),(0,i.kt)("div",{className:"admonition admonition-holder alert alert--alert alert--holder"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\uddc4"),"holder")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'import {\n  Agent,\n  AutoAcceptCredential,\n  CredentialStateChangedEvent,\n  CredentialEventTypes,\n  InitConfig,\n  HttpOutboundTransport,\n  WsOutboundTransport,\n} from "@aries-framework/core"\nimport { agentDependencies } from "@aries-framework/react-native"\n\n// Function to retrieve the genesis transactions from a url\nconst getGenesisTransaction = async (url: string) => {\n  const response = await fetch(url)\n\n  return await response.text()\n}\n\n// get the genesis transactions\nconst genesisTransactionsBCovrinTestNet = await getGenesisTransaction("http://test.bcovrin.vonx.io/genesis")\n\nconst run = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration, label, a mediator and a test ledger.\n  const config: InitConfig = {\n    label: "demo-agent-holder",\n    walletConfig: {\n      id: "main",\n      key: "demoagentholder00000000000000000",\n    },\n    indyLedgers: [\n      {\n        id: "bcovin-test-net",\n        isProduction: false,\n        genesisTransactions: genesisTransactionsBCovrinTestNet,\n      },\n    ],\n    mediatorConnectionsInvite: "https://example.com?c_i=ey...(many bytes omitted)...Q==",\n    autoAcceptCredentials: AutoAcceptCredential.ContentApproved,\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent(config, agentDependencies)\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `HTTP` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Initialize the agent\n  await agent.initialize()\n\n  // Listen to credential events\n  // The implementation here listens to every credential event and when an\n  // offer comes in, the agent accepts it\n  // It is very likely that you want the user to view the credential and accept\n  // it based on user input\n  // It is done like this for demo purposes\n  agent.events.on<CredentialStateChangedEvent>(CredentialEventTypes.CredentialStateChanged, ({ payload }) => {\n    switch (payload.credentialRecord.state) {\n      // Handle the `OfferReceived` state\n      case CredentialState.OfferReceived:\n        // custom logic here\n        // Accept the credential offer\n        agent.credentials.acceptOffer({ credentialRecordId: payload.credentialRecord.id })\n    }\n  })\n}\n\n// Start the whole process\nvoid run()\n')))),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(s.Z,{label:"V1",value:"tab1",mdxType:"TabItem"},(0,i.kt)("div",{className:"admonition admonition-issuer alert alert--alert alert--issuer"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\udcc4"),"issuer")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'import {\n  Agent,\n  AutoAcceptCredential,\n  CredentialProtocolVersion,\n  CredentialPreviewAttribute,\n  InitConfig,\n  HttpInboundTransport,\n  HttpOutboundTransport,\n  WsOutboundTransport,\n} from "@aries-framework/core"\nimport { agentDependencies } from "@aries-framework/node"\nimport fetch from "node-fetch"\n\n// Function to retrieve the genesis transactions from a url\nconst getGenesisTransaction = async (url: string) => {\n  const response = await fetch(url)\n\n  return await response.text()\n}\n\n// get the genesis transactions\nconst genesisTransactionsBCovrinTestNet = await getGenesisTransaction("http://test.bcovrin.vonx.io/genesis")\n\nconst run = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration, label and a test ledger.\n  const config: InitConfig = {\n    label: "demo-agent-issuer",\n    walletConfig: {\n      id: "main",\n      key: "demoagentissuer00000000000000000",\n    },\n    publicDidSeed: "demoissuerdidseed00000000000000",\n    indyLedgers: [\n      {\n        id: "bcovrin-test-net",\n        isProduction: false,\n        genesisTransactions: genesisTransactionsBCovrinTestNet,\n      },\n    ],\n    autoAcceptCredentials: AutoAcceptCredential.ContentApproved,\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent(config, agentDependencies)\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `HTTP` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `HTTP` inbound transport\n  // This is a simple `express` app that listens on port `3000`\n  // You can pass your own `express` app, with custom logic, in here as well\n  // under the key `app`\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3000 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  // Register a schema that is required as a blueprint for a credential offer\n  const schema = await agent.ledger.registerSchema({\n    name: "identity",\n    version: "1.0",\n    attributes: ["Name", "Date of birth"],\n  })\n\n  // Register the credential definition on the ledger, this is required as it\n  // is a binding between the _Issuer_ and the schema\n  const credentialDefinition = await agent.ledger.registerCredentialDefinition({\n    schema,\n    supportRevocation: false,\n    tag: "default",\n  })\n\n  // Offer the credential to another agent via the connectionId\n  // This connectionId is not provided here and must be supplied via, for\n  // example, `agent.connections.getAll()`\n  const credentialExchangeRecord = agent.credentials.offerCredential({\n    connectionId,\n    protocolVersion: CredentialProtocolVersion.V1,\n    credentialFormats: {\n      indy: {\n        attributes: [\n          new CredentialPreviewAttribute({\n            name: "Name",\n            value: "Jane Holder",\n          }),\n          new CredentialPreviewAttribute({\n            name: "Date of birth",\n            value: "10-08-1990",\n          }),\n        ],\n      },\n    },\n  })\n}\n\nvoid run()\n'))))),(0,i.kt)(s.Z,{label:"V2",value:"tab2",mdxType:"TabItem"},(0,i.kt)("div",{className:"admonition admonition-issuer alert alert--alert alert--issuer"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},"\ud83d\udcc4"),"issuer")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0},'import {\n  Agent,\n  AutoAcceptCredential,\n  CredentialProtocolVersion,\n  CredentialPreviewAttribute,\n  InitConfig,\n  HttpInboundTransport,\n  HttpOutboundTransport,\n  WsOutboundTransport,\n} from "@aries-framework/core"\nimport { agentDependencies } from "@aries-framework/node"\nimport fetch from "node-fetch"\n\n// Function to retrieve the genesis transactions from a url\nconst getGenesisTransaction = async (url: string) => {\n  const response = await fetch(url)\n\n  return await response.text()\n}\n\n// get the genesis transactions\nconst genesisTransactionsBCovrinTestNet = await getGenesisTransaction("http://test.bcovrin.vonx.io/genesis")\n\nconst run = async () => {\n  // Simple agent configuration. This sets some basic fields like the wallet\n  // configuration, label and a test ledger.\n  const config: InitConfig = {\n    label: "demo-agent-issuer",\n    walletConfig: {\n      id: "main",\n      key: "demoagentissuer00000000000000000",\n    },\n    publicDidSeed: "demoissuerdidseed00000000000000",\n    indyLedgers: [\n      {\n        id: "bcovrin-test-net",\n        isProduction: false,\n        genesisTransactions: genesisTransactionsBCovrinTestNet,\n      },\n    ],\n    autoAcceptCredentials: AutoAcceptCredential.ContentApproved,\n  }\n\n  // A new instance of an agent is created here\n  const agent = new Agent(config, agentDependencies)\n\n  // Register a simple `WebSocket` outbound transport\n  agent.registerOutboundTransport(new WsOutboundTransport())\n\n  // Register a simple `HTTP` outbound transport\n  agent.registerOutboundTransport(new HttpOutboundTransport())\n\n  // Register a simple `HTTP` inbound transport\n  // This is a simple `express` app that listens on port `3000`\n  // You can pass your own `express` app, with custom logic, in here as well\n  // under the key `app`\n  agent.registerInboundTransport(new HttpInboundTransport({ port: 3000 }))\n\n  // Initialize the agent\n  await agent.initialize()\n\n  // Register a schema that is required as a blueprint for a credential offer\n  const schema = await agent.ledger.registerSchema({\n    name: "identity",\n    version: "1.0",\n    attributes: ["Name", "Date of birth"],\n  })\n\n  // Register the credential definition on the ledger, this is required as it\n  // is a binding between the _Issuer_ and the schema\n  const credentialDefinition = await agent.ledger.registerCredentialDefinition({\n    schema,\n    supportRevocation: false,\n    tag: "default",\n  })\n\n  // Offer the credential to another agent via the connectionId\n  // This connectionId is not provided here and must be supplied via, for\n  // example, `agent.connections.getAll()`\n  const credentialExchangeRecord = agent.credentials.offerCredential({\n    connectionId,\n    protocolVersion: CredentialProtocolVersion.V2,\n    credentialFormats: {\n      indy: {\n        attributes: [\n          new CredentialPreviewAttribute({\n            name: "Name",\n            value: "Jane Holder",\n          }),\n          new CredentialPreviewAttribute({\n            name: "Date of birth",\n            value: "10-08-1990",\n          }),\n        ],\n      },\n    },\n  })\n}\n\nvoid run()\n')))))),(0,i.kt)("h3",{id:"useful-resources"},"Useful resources"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://anoncreds-wg.github.io/anoncreds-spec/"},"AnonCreds")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/hyperledger/aries-rfcs/blob/main/features/0036-issue-credential/README.md"},"Issue Credential V1\nProtocol")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/hyperledger/aries-rfcs/blob/main/features/0453-issue-credential-v2/README.md"},"Issue Credential V2\nProtocol"))))}h.isMDXComponent=!0}}]);